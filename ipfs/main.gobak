package main

import (
	"../xlog"
	// "context"
	// "crypto/ecdsa"
	_ "encoding/hex"
	"fmt"
	"log"
	// "math/big"
	// "time"
	// "./martini"
	"net/http"
	// "./eosgo-client/common"
	// "./eosgo-client/rpc"
	// yoyow "./yoyow"
	// "encoding/json"
	// eos "github.com/eoscanada/eos-go"
	// yoyow "github.com/scorum/bitshares-go"
	// "github.com/scorum/bitshares-go/types"
	"io/ioutil"
	"os"
	// "strconv"
	"bytes"
	"strings"

	shell "github.com/ipfs/go-ipfs-api"
)

type Conf struct {
	Host   string `json:"host,omitempty"`
	From   string `json:"from,omitempty"`
	To     string `json:"to,omitempty"`
	Filter string `json:"filter,omitempty"`
}

var cfg Conf //proxy.Config

func logPanics(function func(http.ResponseWriter,
	*http.Request)) func(http.ResponseWriter, *http.Request) {
	return func(writer http.ResponseWriter, request *http.Request) {
		defer func() {
			if x := recover(); x != nil {
				log.Println(fmt.Sprintf("[%v] caught panic: %v", request.RemoteAddr, x))
				fmt.Println(fmt.Sprintf("[%v] caught panic: %v", request.RemoteAddr, x))
			}
		}()
		function(writer, request)
	}
}

func start() {
	// Where your local node is running on localhost:5001
	sh := shell.NewShell("localhost:5001")
	opt := shell.Pin(true)
	cid, err := sh.Add(strings.NewReader("bradlee2019.01.15xxxxxxxx!"), opt)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error: %s", err)
		os.Exit(1)
	}
	fmt.Printf("added %s\n", cid)

	reader, err := sh.Cat(cid)
	if err != nil {
		fmt.Println(err)
		return
	}

	buf := new(bytes.Buffer)
	buf.ReadFrom(reader)
	catRand := buf.String()
	fmt.Println("cat:", catRand)
}
func testipns() {
	sh := shell.NewShell("localhost:5001")
	final, err := sh.AddDir("addressbook")
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println("final:", final)
	///////////////////////////////////
	pubResp, err := sh.Publish(final, "use for what")
	fmt.Println(pubResp, ":", err)
}
func writeFile(content string) (err error) {
	con := []byte(content)

	err = ioutil.WriteFile("./out", con, 0644)

	if err != nil {
		log.Println("write file err:", err)
		return err
	}
	return nil
}
func main() {
	xlog.XX()
	if !LoadConfig("config.toml", &cfg) {
		return
	}
	log.Println(cfg)
	// start()
	testipns()
	// startMartiniForEos()
	quit := make(chan bool)
	<-quit
}
